---
- name: Get Snapmirror information
  ansible.builtin.include_role:
    name: sgs.ontap.rest
    tasks_from: info.yml
  vars:
    cluster_name: "{{ cluster_match }}"
    gather_subset: snapmirror/relationships
    fields:
      - source
      - destination
      - policy.name
      - transfer_schedule.name
    parameters:
      destination.svm.name: "{{ vserver_match }}"
      destination.path: "*{{ volume }}*"
    result_var: snapmirror_info

- name: Break snapmirror
  ansible.builtin.include_role:
    name: sgs.ontap.snapmirror
  vars:
    destination_hostname: "{{ cluster_match }}"
    source_path: "{{ snapmirror_info.ontap_info.snapmirror_relationships.records[0].source.path}}"
    destination_path: "{{ snapmirror_info.ontap_info.snapmirror_relationships.records[0].destination.path}}"
    relationship_state: broken

- name: Recreate Snapmirror
  ansible.builtin.include_role:
    name: sgs.ontap.snapmirror
  vars:
    destination_hostname: "{{ cluster_opposite }}"
    source_path: "{{ snapmirror_info.ontap_info.snapmirror_relationships.records[0].destination.path}}"
    destination_path: "{{ snapmirror_info.ontap_info.snapmirror_relationships.records[0].source.path}}"
    state: present
    source_hostname: "{{ cluster_match }}"
    relationship_state: active
    policy: "{{ snapmirror_info.ontap_info.snapmirror_relationships.records[0].policy.name}}"
    schedule : "{{ snapmirror_info.ontap_info.snapmirror_relationships.records[0].transfer_schedule.name}}"

- name: Recreate Snapmirror
  ansible.builtin.include_role:
    name: sgs.ontap.snapmirror
  vars:
    destination_hostname: "{{ cluster_opposite }}"
    destination_path: "{{ snapmirror_info.ontap_info.snapmirror_relationships.records[0].source.path}}"
    state: present
    relationship_state: active
